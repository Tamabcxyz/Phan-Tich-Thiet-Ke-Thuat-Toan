#include <stdio.h>
#include <conio.h>
typedef int keytype;
typedef struct{
	keytype key;
}recordtype;
int ReadFromFile(recordtype a[], FILE *k){
	int n;
	k=fopen("Doc.txt","r");
	fscanf(k,"%d",&n);
	for(int i=0;i<n;i++){
		fscanf(k,"%d",&a[i].key);
	}
	return n;
}
void WriteFile(recordtype a[],int n, FILE *t){
	t=fopen("KetQua.txt","w");
	for(int i=0;i<n;i++){
		fprintf(t,"%d ",a[i].key);
	}
}
void Swap(recordtype &x, recordtype &y){
	recordtype temp=x;
	x=y;
	y=temp;
}
// sap xep chon
void SelectionSort(recordtype a[], int n){
	keytype lowkey;
	int lowindex;
	for(int i=0;i<=n-2;i++){
		lowkey=a[i].key;
		lowindex=i;
		for(int j=i+1;j<=n-1;j++){
			if(a[j].key<lowkey){
				lowkey=a[j].key;
				lowindex=j;
			}
		}
		Swap(a[i],a[lowindex]);
	}
}
// sap xep sen
void InsertionSort(recordtype a[], int n){
	for(int i=1;i<=n-1;i++){
		int j=i;
		while(j>0&&a[j].key<a[j-1].key){
			Swap(a[j],a[j-1]);
			j--;
		}	
	}
}
// sap xep noi bot
void BubbleSort(recordtype a[], int n){
	for(int i=0;i<=n-2;i++){
		for(int j=n-1;j>=i+1;j--){
			if(a[j].key<a[j-1].key){
				Swap(a[j],a[j-1]);
			}
		}
	}
}
void Print_List(recordtype a[], int n){
	for(int i=0;i<n;i++){
		printf("%d ",a[i].key);
	}
}
// tim chot
int FindPivot(recordtype a[], int i, int j){
	 keytype firstkey;
	 int k=i+1;
	 firstkey = a[i].key;
	 while(k<=j&&a[k].key==firstkey)k++;
	 if(k>j)return -1;
	 if(a[k].key>firstkey)return k;
	 return i;
}
int Patition(recordtype a[], int i, int j, int pivot){
	int L,R;
	L=i;
	R=j;
	while(L<=R){
		while(a[L].key<pivot)L++;
		while(a[R].key>=pivot)R--;
		if(L<R)Swap(a[L],a[R]);
	}return L;
}
void QuickSort(recordtype a[], int i, int j){
	keytype pivot;
	int pivotindex,k;
	pivotindex=FindPivot(a,i,j);
	if(pivotindex!=-1){
		pivot=a[pivotindex].key;
		k=Patition(a,i,j,pivot);
		QuickSort(a,i,k-1);
		QuickSort(a,k,j);
	}
}
void PushDown(recordtype a[], int first, int last){
	int r=first;
	while(r<=(last-1)/2){
		if(last==2*r+1){
			if(a[r].key>a[last].key)Swap(a[r],a[last]);
			r=last;
		}else{
			if(a[r].key>a[2*r+1].key&&a[2*r+1].key<=a[2*r+2].key){
				Swap(a[r],a[2*r+1]);
				r=2*r+1;	
			}
			else{
				if(a[r].key>a[2*r+2].key&&a[2*r+1].key>=a[2*r+2].key){
					Swap(a[r],a[2*r+2]);
					r=2*r+2;
				}
				else r=last;
			}	
		}
	}
}
void HeapSort(recordtype a[], int n){
	int i;
	for(i=(n-2)/2;i>=0;i--){
		PushDown(a,i,n-1);
	}
	for(i=n-1;i>=2;i--){
		Swap(a[0],a[i]);
		PushDown(a,0,i-1);
	}
	Swap(a[0],a[1]);
}
int main(){
	int n;recordtype a[100];
	FILE *d,*v;
	n=ReadFromFile(a,d);
	//SelectionSort(a,n);
	//InsertionSort(a,n);
	//BubbleSort(a,n);
	//QuickSort(a,0,n);
	HeapSort(a,n);
	WriteFile(a,n,v);
}
